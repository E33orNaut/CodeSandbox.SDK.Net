### YamlMime:ManagedReference
items:
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService
  commentId: T:CodeSandbox.SDK.Net.Interfaces.IGitService
  id: IGitService
  parent: CodeSandbox.SDK.Net.Interfaces
  children:
  - CodeSandbox.SDK.Net.Interfaces.IGitService.GetRemotesAsync(System.Threading.CancellationToken)
  - CodeSandbox.SDK.Net.Interfaces.IGitService.GetStatusAsync(System.Threading.CancellationToken)
  - CodeSandbox.SDK.Net.Interfaces.IGitService.GetTargetDiffAsync(System.String,System.Threading.CancellationToken)
  - CodeSandbox.SDK.Net.Interfaces.IGitService.PostCommitAsync(System.String,System.Threading.CancellationToken)
  - CodeSandbox.SDK.Net.Interfaces.IGitService.PostDiscardAsync(System.String[],System.Threading.CancellationToken)
  - CodeSandbox.SDK.Net.Interfaces.IGitService.PostPullAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  - CodeSandbox.SDK.Net.Interfaces.IGitService.PostRemoteAddAsync(System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IGitService
  nameWithType: IGitService
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService
  type: Interface
  source:
    remote:
      path: CodeSandbox.SDK.Net/Interfaces/IGitService.cs
      branch: master
      repo: https://github.com/E33orNaut/CodeSandbox.SDK.Net.git
    id: IGitService
    path: Interfaces/IGitService.cs
    startLine: 10
  assemblies:
  - CodeSandbox.SDK.Net
  namespace: CodeSandbox.SDK.Net.Interfaces
  summary: Interface for interacting with Git-related API endpoints.
  example: []
  syntax:
    content: public interface IGitService
    content.vb: Public Interface IGitService
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.GetStatusAsync(System.Threading.CancellationToken)
  commentId: M:CodeSandbox.SDK.Net.Interfaces.IGitService.GetStatusAsync(System.Threading.CancellationToken)
  id: GetStatusAsync(System.Threading.CancellationToken)
  parent: CodeSandbox.SDK.Net.Interfaces.IGitService
  langs:
  - csharp
  - vb
  name: GetStatusAsync(CancellationToken)
  nameWithType: IGitService.GetStatusAsync(CancellationToken)
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.GetStatusAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: CodeSandbox.SDK.Net/Interfaces/IGitService.cs
      branch: master
      repo: https://github.com/E33orNaut/CodeSandbox.SDK.Net.git
    id: GetStatusAsync
    path: Interfaces/IGitService.cs
    startLine: 17
  assemblies:
  - CodeSandbox.SDK.Net
  namespace: CodeSandbox.SDK.Net.Interfaces
  summary: Asynchronously gets the current Git status.
  example: []
  syntax:
    content: Task<GitStatusResult> GetStatusAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{CodeSandbox.SDK.Net.Models.GitStatusResult}
      description: A task that returns a <xref href="CodeSandbox.SDK.Net.Models.GitStatusResult" data-throw-if-not-resolved="false"></xref> representing the current status of the Git repository.
    content.vb: Function GetStatusAsync(cancellationToken As CancellationToken = Nothing) As Task(Of GitStatusResult)
  overload: CodeSandbox.SDK.Net.Interfaces.IGitService.GetStatusAsync*
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.GetRemotesAsync(System.Threading.CancellationToken)
  commentId: M:CodeSandbox.SDK.Net.Interfaces.IGitService.GetRemotesAsync(System.Threading.CancellationToken)
  id: GetRemotesAsync(System.Threading.CancellationToken)
  parent: CodeSandbox.SDK.Net.Interfaces.IGitService
  langs:
  - csharp
  - vb
  name: GetRemotesAsync(CancellationToken)
  nameWithType: IGitService.GetRemotesAsync(CancellationToken)
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.GetRemotesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: CodeSandbox.SDK.Net/Interfaces/IGitService.cs
      branch: master
      repo: https://github.com/E33orNaut/CodeSandbox.SDK.Net.git
    id: GetRemotesAsync
    path: Interfaces/IGitService.cs
    startLine: 24
  assemblies:
  - CodeSandbox.SDK.Net
  namespace: CodeSandbox.SDK.Net.Interfaces
  summary: Asynchronously retrieves the configured Git remotes.
  example: []
  syntax:
    content: Task<GitRemotesResult> GetRemotesAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{CodeSandbox.SDK.Net.Models.GitRemotesResult}
      description: A task that returns a <xref href="CodeSandbox.SDK.Net.Models.GitRemotesResult" data-throw-if-not-resolved="false"></xref> containing the list of Git remotes.
    content.vb: Function GetRemotesAsync(cancellationToken As CancellationToken = Nothing) As Task(Of GitRemotesResult)
  overload: CodeSandbox.SDK.Net.Interfaces.IGitService.GetRemotesAsync*
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.GetTargetDiffAsync(System.String,System.Threading.CancellationToken)
  commentId: M:CodeSandbox.SDK.Net.Interfaces.IGitService.GetTargetDiffAsync(System.String,System.Threading.CancellationToken)
  id: GetTargetDiffAsync(System.String,System.Threading.CancellationToken)
  parent: CodeSandbox.SDK.Net.Interfaces.IGitService
  langs:
  - csharp
  - vb
  name: GetTargetDiffAsync(string, CancellationToken)
  nameWithType: IGitService.GetTargetDiffAsync(string, CancellationToken)
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.GetTargetDiffAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: CodeSandbox.SDK.Net/Interfaces/IGitService.cs
      branch: master
      repo: https://github.com/E33orNaut/CodeSandbox.SDK.Net.git
    id: GetTargetDiffAsync
    path: Interfaces/IGitService.cs
    startLine: 32
  assemblies:
  - CodeSandbox.SDK.Net
  namespace: CodeSandbox.SDK.Net.Interfaces
  summary: Asynchronously gets the difference between the current branch and the specified target branch.
  example: []
  syntax:
    content: Task<GitTargetDiffResult> GetTargetDiffAsync(string branch, CancellationToken cancellationToken = default)
    parameters:
    - id: branch
      type: System.String
      description: The target branch to compare against.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{CodeSandbox.SDK.Net.Models.GitTargetDiffResult}
      description: A task that returns a <xref href="CodeSandbox.SDK.Net.Models.GitTargetDiffResult" data-throw-if-not-resolved="false"></xref> representing the diff details.
    content.vb: Function GetTargetDiffAsync(branch As String, cancellationToken As CancellationToken = Nothing) As Task(Of GitTargetDiffResult)
  overload: CodeSandbox.SDK.Net.Interfaces.IGitService.GetTargetDiffAsync*
  nameWithType.vb: IGitService.GetTargetDiffAsync(String, CancellationToken)
  fullName.vb: CodeSandbox.SDK.Net.Interfaces.IGitService.GetTargetDiffAsync(String, System.Threading.CancellationToken)
  name.vb: GetTargetDiffAsync(String, CancellationToken)
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.PostPullAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:CodeSandbox.SDK.Net.Interfaces.IGitService.PostPullAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  id: PostPullAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  parent: CodeSandbox.SDK.Net.Interfaces.IGitService
  langs:
  - csharp
  - vb
  name: PostPullAsync(string, bool, CancellationToken)
  nameWithType: IGitService.PostPullAsync(string, bool, CancellationToken)
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.PostPullAsync(string, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: CodeSandbox.SDK.Net/Interfaces/IGitService.cs
      branch: master
      repo: https://github.com/E33orNaut/CodeSandbox.SDK.Net.git
    id: PostPullAsync
    path: Interfaces/IGitService.cs
    startLine: 41
  assemblies:
  - CodeSandbox.SDK.Net
  namespace: CodeSandbox.SDK.Net.Interfaces
  summary: Asynchronously performs a Git pull operation on the specified branch.
  example: []
  syntax:
    content: Task PostPullAsync(string branch, bool force = false, CancellationToken cancellationToken = default)
    parameters:
    - id: branch
      type: System.String
      description: The branch to pull from.
    - id: force
      type: System.Boolean
      description: Indicates whether to force the pull operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous pull operation.
    content.vb: Function PostPullAsync(branch As String, force As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task
  overload: CodeSandbox.SDK.Net.Interfaces.IGitService.PostPullAsync*
  nameWithType.vb: IGitService.PostPullAsync(String, Boolean, CancellationToken)
  fullName.vb: CodeSandbox.SDK.Net.Interfaces.IGitService.PostPullAsync(String, Boolean, System.Threading.CancellationToken)
  name.vb: PostPullAsync(String, Boolean, CancellationToken)
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.PostDiscardAsync(System.String[],System.Threading.CancellationToken)
  commentId: M:CodeSandbox.SDK.Net.Interfaces.IGitService.PostDiscardAsync(System.String[],System.Threading.CancellationToken)
  id: PostDiscardAsync(System.String[],System.Threading.CancellationToken)
  parent: CodeSandbox.SDK.Net.Interfaces.IGitService
  langs:
  - csharp
  - vb
  name: PostDiscardAsync(string[], CancellationToken)
  nameWithType: IGitService.PostDiscardAsync(string[], CancellationToken)
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.PostDiscardAsync(string[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: CodeSandbox.SDK.Net/Interfaces/IGitService.cs
      branch: master
      repo: https://github.com/E33orNaut/CodeSandbox.SDK.Net.git
    id: PostDiscardAsync
    path: Interfaces/IGitService.cs
    startLine: 49
  assemblies:
  - CodeSandbox.SDK.Net
  namespace: CodeSandbox.SDK.Net.Interfaces
  summary: Asynchronously discards changes on the specified file paths.
  example: []
  syntax:
    content: Task<List<string>> PostDiscardAsync(string[] paths, CancellationToken cancellationToken = default)
    parameters:
    - id: paths
      type: System.String[]
      description: An array of file paths to discard changes for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
      description: A task that returns a list of strings representing the paths that were discarded.
    content.vb: Function PostDiscardAsync(paths As String(), cancellationToken As CancellationToken = Nothing) As Task(Of List(Of String))
  overload: CodeSandbox.SDK.Net.Interfaces.IGitService.PostDiscardAsync*
  nameWithType.vb: IGitService.PostDiscardAsync(String(), CancellationToken)
  fullName.vb: CodeSandbox.SDK.Net.Interfaces.IGitService.PostDiscardAsync(String(), System.Threading.CancellationToken)
  name.vb: PostDiscardAsync(String(), CancellationToken)
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.PostCommitAsync(System.String,System.Threading.CancellationToken)
  commentId: M:CodeSandbox.SDK.Net.Interfaces.IGitService.PostCommitAsync(System.String,System.Threading.CancellationToken)
  id: PostCommitAsync(System.String,System.Threading.CancellationToken)
  parent: CodeSandbox.SDK.Net.Interfaces.IGitService
  langs:
  - csharp
  - vb
  name: PostCommitAsync(string, CancellationToken)
  nameWithType: IGitService.PostCommitAsync(string, CancellationToken)
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.PostCommitAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: CodeSandbox.SDK.Net/Interfaces/IGitService.cs
      branch: master
      repo: https://github.com/E33orNaut/CodeSandbox.SDK.Net.git
    id: PostCommitAsync
    path: Interfaces/IGitService.cs
    startLine: 57
  assemblies:
  - CodeSandbox.SDK.Net
  namespace: CodeSandbox.SDK.Net.Interfaces
  summary: Asynchronously commits staged changes with the given commit message.
  example: []
  syntax:
    content: Task PostCommitAsync(string message, CancellationToken cancellationToken = default)
    parameters:
    - id: message
      type: System.String
      description: The commit message to use.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous commit operation.
    content.vb: Function PostCommitAsync(message As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: CodeSandbox.SDK.Net.Interfaces.IGitService.PostCommitAsync*
  nameWithType.vb: IGitService.PostCommitAsync(String, CancellationToken)
  fullName.vb: CodeSandbox.SDK.Net.Interfaces.IGitService.PostCommitAsync(String, System.Threading.CancellationToken)
  name.vb: PostCommitAsync(String, CancellationToken)
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.PostRemoteAddAsync(System.String,System.Threading.CancellationToken)
  commentId: M:CodeSandbox.SDK.Net.Interfaces.IGitService.PostRemoteAddAsync(System.String,System.Threading.CancellationToken)
  id: PostRemoteAddAsync(System.String,System.Threading.CancellationToken)
  parent: CodeSandbox.SDK.Net.Interfaces.IGitService
  langs:
  - csharp
  - vb
  name: PostRemoteAddAsync(string, CancellationToken)
  nameWithType: IGitService.PostRemoteAddAsync(string, CancellationToken)
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.PostRemoteAddAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: CodeSandbox.SDK.Net/Interfaces/IGitService.cs
      branch: master
      repo: https://github.com/E33orNaut/CodeSandbox.SDK.Net.git
    id: PostRemoteAddAsync
    path: Interfaces/IGitService.cs
    startLine: 65
  assemblies:
  - CodeSandbox.SDK.Net
  namespace: CodeSandbox.SDK.Net.Interfaces
  summary: Asynchronously adds a new remote repository with the specified URL.
  example: []
  syntax:
    content: Task PostRemoteAddAsync(string url, CancellationToken cancellationToken = default)
    parameters:
    - id: url
      type: System.String
      description: The URL of the remote repository to add.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation of adding the remote.
    content.vb: Function PostRemoteAddAsync(url As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: CodeSandbox.SDK.Net.Interfaces.IGitService.PostRemoteAddAsync*
  nameWithType.vb: IGitService.PostRemoteAddAsync(String, CancellationToken)
  fullName.vb: CodeSandbox.SDK.Net.Interfaces.IGitService.PostRemoteAddAsync(String, System.Threading.CancellationToken)
  name.vb: PostRemoteAddAsync(String, CancellationToken)
references:
- uid: CodeSandbox.SDK.Net.Interfaces
  commentId: N:CodeSandbox.SDK.Net.Interfaces
  href: CodeSandbox.html
  name: CodeSandbox.SDK.Net.Interfaces
  nameWithType: CodeSandbox.SDK.Net.Interfaces
  fullName: CodeSandbox.SDK.Net.Interfaces
  spec.csharp:
  - uid: CodeSandbox
    name: CodeSandbox
    href: CodeSandbox.html
  - name: .
  - uid: CodeSandbox.SDK
    name: SDK
    href: CodeSandbox.SDK.html
  - name: .
  - uid: CodeSandbox.SDK.Net
    name: Net
    href: CodeSandbox.SDK.Net.html
  - name: .
  - uid: CodeSandbox.SDK.Net.Interfaces
    name: Interfaces
    href: CodeSandbox.SDK.Net.Interfaces.html
  spec.vb:
  - uid: CodeSandbox
    name: CodeSandbox
    href: CodeSandbox.html
  - name: .
  - uid: CodeSandbox.SDK
    name: SDK
    href: CodeSandbox.SDK.html
  - name: .
  - uid: CodeSandbox.SDK.Net
    name: Net
    href: CodeSandbox.SDK.Net.html
  - name: .
  - uid: CodeSandbox.SDK.Net.Interfaces
    name: Interfaces
    href: CodeSandbox.SDK.Net.Interfaces.html
- uid: CodeSandbox.SDK.Net.Models.GitStatusResult
  commentId: T:CodeSandbox.SDK.Net.Models.GitStatusResult
  href: CodeSandbox.SDK.Net.Models.GitStatusResult.html
  name: GitStatusResult
  nameWithType: GitStatusResult
  fullName: CodeSandbox.SDK.Net.Models.GitStatusResult
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.GetStatusAsync*
  commentId: Overload:CodeSandbox.SDK.Net.Interfaces.IGitService.GetStatusAsync
  href: CodeSandbox.SDK.Net.Interfaces.IGitService.html#CodeSandbox_SDK_Net_Interfaces_IGitService_GetStatusAsync_System_Threading_CancellationToken_
  name: GetStatusAsync
  nameWithType: IGitService.GetStatusAsync
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.GetStatusAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{CodeSandbox.SDK.Net.Models.GitStatusResult}
  commentId: T:System.Threading.Tasks.Task{CodeSandbox.SDK.Net.Models.GitStatusResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<GitStatusResult>
  nameWithType: Task<GitStatusResult>
  fullName: System.Threading.Tasks.Task<CodeSandbox.SDK.Net.Models.GitStatusResult>
  nameWithType.vb: Task(Of GitStatusResult)
  fullName.vb: System.Threading.Tasks.Task(Of CodeSandbox.SDK.Net.Models.GitStatusResult)
  name.vb: Task(Of GitStatusResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: CodeSandbox.SDK.Net.Models.GitStatusResult
    name: GitStatusResult
    href: CodeSandbox.SDK.Net.Models.GitStatusResult.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: CodeSandbox.SDK.Net.Models.GitStatusResult
    name: GitStatusResult
    href: CodeSandbox.SDK.Net.Models.GitStatusResult.html
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: CodeSandbox.SDK.Net.Models.GitRemotesResult
  commentId: T:CodeSandbox.SDK.Net.Models.GitRemotesResult
  href: CodeSandbox.SDK.Net.Models.GitRemotesResult.html
  name: GitRemotesResult
  nameWithType: GitRemotesResult
  fullName: CodeSandbox.SDK.Net.Models.GitRemotesResult
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.GetRemotesAsync*
  commentId: Overload:CodeSandbox.SDK.Net.Interfaces.IGitService.GetRemotesAsync
  href: CodeSandbox.SDK.Net.Interfaces.IGitService.html#CodeSandbox_SDK_Net_Interfaces_IGitService_GetRemotesAsync_System_Threading_CancellationToken_
  name: GetRemotesAsync
  nameWithType: IGitService.GetRemotesAsync
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.GetRemotesAsync
- uid: System.Threading.Tasks.Task{CodeSandbox.SDK.Net.Models.GitRemotesResult}
  commentId: T:System.Threading.Tasks.Task{CodeSandbox.SDK.Net.Models.GitRemotesResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<GitRemotesResult>
  nameWithType: Task<GitRemotesResult>
  fullName: System.Threading.Tasks.Task<CodeSandbox.SDK.Net.Models.GitRemotesResult>
  nameWithType.vb: Task(Of GitRemotesResult)
  fullName.vb: System.Threading.Tasks.Task(Of CodeSandbox.SDK.Net.Models.GitRemotesResult)
  name.vb: Task(Of GitRemotesResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: CodeSandbox.SDK.Net.Models.GitRemotesResult
    name: GitRemotesResult
    href: CodeSandbox.SDK.Net.Models.GitRemotesResult.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: CodeSandbox.SDK.Net.Models.GitRemotesResult
    name: GitRemotesResult
    href: CodeSandbox.SDK.Net.Models.GitRemotesResult.html
  - name: )
- uid: CodeSandbox.SDK.Net.Models.GitTargetDiffResult
  commentId: T:CodeSandbox.SDK.Net.Models.GitTargetDiffResult
  href: CodeSandbox.SDK.Net.Models.GitTargetDiffResult.html
  name: GitTargetDiffResult
  nameWithType: GitTargetDiffResult
  fullName: CodeSandbox.SDK.Net.Models.GitTargetDiffResult
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.GetTargetDiffAsync*
  commentId: Overload:CodeSandbox.SDK.Net.Interfaces.IGitService.GetTargetDiffAsync
  href: CodeSandbox.SDK.Net.Interfaces.IGitService.html#CodeSandbox_SDK_Net_Interfaces_IGitService_GetTargetDiffAsync_System_String_System_Threading_CancellationToken_
  name: GetTargetDiffAsync
  nameWithType: IGitService.GetTargetDiffAsync
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.GetTargetDiffAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task{CodeSandbox.SDK.Net.Models.GitTargetDiffResult}
  commentId: T:System.Threading.Tasks.Task{CodeSandbox.SDK.Net.Models.GitTargetDiffResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<GitTargetDiffResult>
  nameWithType: Task<GitTargetDiffResult>
  fullName: System.Threading.Tasks.Task<CodeSandbox.SDK.Net.Models.GitTargetDiffResult>
  nameWithType.vb: Task(Of GitTargetDiffResult)
  fullName.vb: System.Threading.Tasks.Task(Of CodeSandbox.SDK.Net.Models.GitTargetDiffResult)
  name.vb: Task(Of GitTargetDiffResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: CodeSandbox.SDK.Net.Models.GitTargetDiffResult
    name: GitTargetDiffResult
    href: CodeSandbox.SDK.Net.Models.GitTargetDiffResult.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: CodeSandbox.SDK.Net.Models.GitTargetDiffResult
    name: GitTargetDiffResult
    href: CodeSandbox.SDK.Net.Models.GitTargetDiffResult.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.PostPullAsync*
  commentId: Overload:CodeSandbox.SDK.Net.Interfaces.IGitService.PostPullAsync
  href: CodeSandbox.SDK.Net.Interfaces.IGitService.html#CodeSandbox_SDK_Net_Interfaces_IGitService_PostPullAsync_System_String_System_Boolean_System_Threading_CancellationToken_
  name: PostPullAsync
  nameWithType: IGitService.PostPullAsync
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.PostPullAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.PostDiscardAsync*
  commentId: Overload:CodeSandbox.SDK.Net.Interfaces.IGitService.PostDiscardAsync
  href: CodeSandbox.SDK.Net.Interfaces.IGitService.html#CodeSandbox_SDK_Net_Interfaces_IGitService_PostDiscardAsync_System_String___System_Threading_CancellationToken_
  name: PostDiscardAsync
  nameWithType: IGitService.PostDiscardAsync
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.PostDiscardAsync
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<string>>
  nameWithType: Task<List<string>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<string>>
  nameWithType.vb: Task(Of List(Of String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of String))
  name.vb: Task(Of List(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.PostCommitAsync*
  commentId: Overload:CodeSandbox.SDK.Net.Interfaces.IGitService.PostCommitAsync
  href: CodeSandbox.SDK.Net.Interfaces.IGitService.html#CodeSandbox_SDK_Net_Interfaces_IGitService_PostCommitAsync_System_String_System_Threading_CancellationToken_
  name: PostCommitAsync
  nameWithType: IGitService.PostCommitAsync
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.PostCommitAsync
- uid: CodeSandbox.SDK.Net.Interfaces.IGitService.PostRemoteAddAsync*
  commentId: Overload:CodeSandbox.SDK.Net.Interfaces.IGitService.PostRemoteAddAsync
  href: CodeSandbox.SDK.Net.Interfaces.IGitService.html#CodeSandbox_SDK_Net_Interfaces_IGitService_PostRemoteAddAsync_System_String_System_Threading_CancellationToken_
  name: PostRemoteAddAsync
  nameWithType: IGitService.PostRemoteAddAsync
  fullName: CodeSandbox.SDK.Net.Interfaces.IGitService.PostRemoteAddAsync
